A) When and why BDD was defined:
Dan North, who first formulated the BDD approach, claims that it was designed to address recurring issues in the teaching of TDD. 
Behaviour Driven Development (BDD) is a synthesis and refinement of practices stemming from:
   * Test Driven Development (TDD) and 
   * Acceptance Test Driven Development (ATDD).
Origins:
* 2003: agiledox (http://agiledox.sourceforge.net/), the ancestor of BDD, is a tool generating technical documentation automatically from JUnit tests, written by Chris Stevenson
* 2004: in order to test his hypotheses about de-emphasizing "test" terminology in favor of "behavior", Dan North releases JBehave (http://jbehave.org/)
* 2006: in collaboration with Chris Matts, North proposes the given-when-then canvas to expand the scope of BDD to business analysis and documents the approach in "Introducing BDD" (https://dannorth.net/introducing-bdd/)
* 2006-2009: several new tools are released confirming the community's investment in BDD, such as RSpec or more recently, Cucumber and GivWenZen




B) The most important aspects of BDD
* Instead of referring to "tests", a BDD practitioner will prefer the terms "scenario" and "specification".
* In emphasizing the term "specification", the intent of BDD is to provide a single answer to what many Agile teams view as separate activities: the creation of unit tests and "technical" code on one hand, the creation of functional tests and "features" on the other hand. 
* This should lead to increased collaboration between developers, test specialists, and domain experts.
* BDD aims to gather in a single place the specification of an outcome valuable to a user, generally using the role-feature matrix of (User Stories), as well as examples or scenarios expressed in the form given-when-then
* Rather than refer to "the unit tests of a class", a practitioner or a team using BDD prefers to speak of "the specifications of the behavior of the class".
* Rather than refer to "functional tests", the preferred term will be "specifications of the product's behavior". 




c) Why is useful and when could be applied
* Thinking "from the outside in", in other words implement only those behaviors which contribute most directly to these business outcomes, so as to minimize waste
* Describe behaviors in a single notation which is directly accessible to domain experts, testers and developers, so as to improve communication. Thus BDD offers more precise guidance on organizing the conversation between developers, testers and domain experts
* Apply these techniques all the way down to the lowest levels of abstraction of the software, paying particular attention to the distribution of behavior, so that evolution remains cheap
* Tools targeting a BDD approach generally afford the automatic generation of technical and end user documentation from BDD "specifications"




D) Which type of teams could implement BDD

* As BDD directly impacts the actual design of the software, while TDD is more focused on the testing, BDD seems more useful for projects that are in an starting development phase.
* Based on the characteristics of BDD they are more suited for teams with good communication channels, especially because the need to meet for the "Three amigos meeting", face to face communication maybe the best approach. 
* Also seems that it is needed some maturity from development teams, since, although Dan North, claims that it was designed to address recurring issues in the teaching of TDD, it is clear that BDD requires familiarity with a greater range of concepts than TDD does, and it seems difficult to recommend a novice programmer should first learn BDD without prior exposure to TDD concepts.




E) Structure of a feature - give an example 
Name - Teletransportation 
Size [Optional]- Medium  
Priority- High 




F) Structure of a user story - give an example
Title: A privileged user can be teletransported to a different geographic position 
Narrative:
As a: 
Privileged user 
I want:
To be carried to a specific geographic position in the earth
So that [benefit]
I can avoid traffic jams and get to my scrum meeting always 'on time'  




G) Structure of a scenario - give an example 
(For the Feature "Teletransporting" above)
Given: I 'Katerina' as a privileged user of the teletransporter machine
When: I enter wrong geographic position and press 'Start teletransportation' button
Then: I receive a warning message saying that the position is wrong and teletransportation won't start 




H) Differences between BDD and BDT
* The main difference is that BDT is the testing perspective on Behavior Driven Development. 
* BDT focusses on the testing of an application that was already developed or coded
* BDD involves the entire process of the development from the definition of the requirements of the feature or application 
* This is a major difference, as BDD directly impacts the actual design of the software, while TDD is more focused on the testing.


